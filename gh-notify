#!/usr/bin/env bash
set -e -o pipefail

GREEN='\033[0;32m'
BLUE='\033[1;34m'
GRAY='\033[0;30m'
NC='\033[0m'

help() {
    cat <<EOF
Usage: gh notify [--flags]

View and search and GitHub notifications. 
Select a pull request or issue to get more info on it.

Flags:
    -a      include all notifications
    -n      max number of notifications to show (default 30)
    -p      show only participating or mention notifications
    -r      mark all notifications as read
    -s      print a static display
EOF
}

include_all_flag='false'
only_participating_flag='false'
print_static_flag='false'
mark_read_flag='false'
num_notifications='30'

while getopts 'n:pahsr' flag; do
  case "${flag}" in
    n) num_notifications="${OPTARG}" ;;
    a) include_all_flag='true' ;;
    p) only_participating_flag='true' ;;
    s) print_static_flag='true' ;;
    r) mark_read_flag='true' ;;
    h) help
       exit 0 ;;
    *) help 
       exit 1 ;;
  esac
done

get_notifs() {
    gh api -X GET /notifications --cache=20s \
    -f per_page="$num_notifications" -f all="$include_all_flag" -f participating="$only_participating_flag" \
    --template '
    {{- range . -}}
        {{- printf "%s\t%s\t%s\t%s\t" .reason .updated_at .subject.type .subject.title -}} 
        {{- printf "%s\t" .repository.full_name -}}
        {{- printf "%s\n" .subject.url -}}
    {{- end -}}'
}

print_notifs() {
    local reason timestamp type title repo url 
    get_notifs | while IFS=$'\t' read -r reason timestamp type title repo url; do
        time="${timestamp:5:11}" 
        case "$type" in 
            "PullRequest" | "Issue" ) 
                printf "${GRAY}%s${NC}\t${BLUE}%s${NC}\t%s ${GREEN}#%s${NC}\t%s\n" \
                    "${time/T/ }" "${repo}" "${type}" "${url##*/}" "${title}" 
                ;;
            *)
                printf "${GRAY}%s${NC}\t${BLUE}%s${NC}\t%s \t%s\n" \
                    "${time/T/ }" "${repo}" "${type}" "${title}" 
                ;;
        esac
    done | column -t -s$'\t'
}

select_notif() {
    local notifs 
    notifs="$(print_notifs)"
    [ -n "$notifs" ] || exit 0 
    fzf --ansi <<< "$notifs"
}

mark_notifs_read() {
    gh api -X PUT /notifications -F read=true --silent 
}

gh_info() {
    local repo type num
    read _ _ repo type num _
    case $type in
        "PullRequest")
            gh pr view "${num#\#}" -R "${repo}"
            ;;
        "Issue")
            gh issue view "${num#\#}" -R "${repo}"
            ;;
        "Release")
            gh release view -R "${repo}"
            ;;
        *)
            ;;
    esac
}

if [[ $mark_read_flag == "true" ]]; then
    mark_notifs_read
    exit 0
fi

if [[ $print_static_flag == "false" ]]; then
    if ! type -p fzf >/dev/null; then
      echo "error: install \`fzf\` or use the -s flag" >&2
      exit 1
    fi
    select_notif | gh_info 
else
    print_notifs
fi

#!/usr/bin/env bash
set -e -o pipefail

help() {
    cat <<EOF
Usage: gh notify [--flags]

View and search and GitHub notifications.
Select a pull request or issue to get more info on it.

Flags:
    -a      include all notifications
    -o      open the notification in your browser
    -e      exclude notifications matching a string
            Ex. gh notify -e "MyDayJob"
    -f      filter to only notifications matching a string
            Ex. gh notify -f "CoolRepo"
    -n      max number of notifications to show (capped at 100)
            Not specifying will retrieve all notifications.
    -p      show only participating or mention notifications
    -r      mark all notifications as read
    -s      print a static display

Note: -e and -f both support GNU regular expressions.
      -n limits the number in the 1st page of results
         and happens before -e or -f are applied
EOF
}

include_all_flag='false'
open_browser_view='false'
only_participating_flag='false'
print_static_flag='false'
mark_read_flag='false'
num_notifications='0'
exclusion_string='XXX_BOGUS_STRING_THAT_SHOULD_NOT_EXIST_XXX'
filter_string=''

while getopts 'e:f:n:paohsr' flag; do
    case "${flag}" in
    n) num_notifications="${OPTARG}" ;;
    e) exclusion_string="${OPTARG}" ;;
    f) filter_string="${OPTARG}" ;;
    a) include_all_flag='true' ;;
    o) open_browser_view='true' ;;
    p) only_participating_flag='true' ;;
    s) print_static_flag='true' ;;
    r) mark_read_flag='true' ;;
    h)
        help
        exit 0
        ;;
    *)
        help
        exit 1
        ;;
    esac
done

get_notifs() {
    page_num=$1
    if [ "$page_num" == "" ]; then
        page_num=1
    fi
    local_page_size=100
    if [ "$num_notifications" != "0" ]; then
        local_page_size=$num_notifications
    fi
    printf >&2 "." # "marching ants" because sometimes this takes a bit.
    gh api -X GET /notifications --cache=20s \
        -f per_page="$local_page_size" -f all="$include_all_flag" -f participating="$only_participating_flag" -f page="$page_num" \
        --template '
    {{- range . -}}
        {{- printf "%s\t%s\t%s\t" (timefmt "02/Jan/06" .updated_at | color "gray+h") .subject.type .subject.title -}}
        {{- printf "%s\t" (.repository.full_name | color "blue+b") -}}
        {{- printf "%s\n" (.subject.url | color "green") }}
    {{- end -}}'
}

print_notifs() {
    local timefmt type title repo url
    all_notifs=""
    page_num=1
    while true; do
        page=$(get_notifs $page_num)
        if [ "$page" == "" ]; then
            break
        else
            page_num=$((page_num + 1))
        fi
        new_notifs=$(
            echo "$page" | while IFS=$'\t' read -r timefmt type title repo url; do
                # "${url/http*\//#}" keep the green color but remove everything between http and the very last slash symbol
                printf "%s\t%s\t%s %s\t%s\n" "${timefmt}" "${repo}" "${type}" "${url/http*\//#}" "${title}"
            done
        )
        all_notifs="$all_notifs$new_notifs"
        # this is going to be a bit funky.
        # if you specify a number larger than 100
        # GitHub will ignore it and give you only 100
        if [ "$num_notifications" != "0" ]; then
            break
        fi
    done
    # clear the dots we printed
    echo >&2 -e "\r\033[K"
    # the different pages frequently come back with different
    # column widths.
    # If we insert a tab before the notification type
    # and recolumnize on that everything works out.
    echo "$all_notifs" |
        sed -e "s/ Issue / \tIssue /" \
            -e "s/ PullRequest / \tPullRequest /" \
            -e "s/ Commit / \tCommit /" \
            -e "s/ Release / \tRelease /" |
        column -t -s $'\t'
}

filtered_notifs() {
    print_notifs | grep -v "$exclusion_string" | grep "$filter_string"
}

select_notif() {
    local notifs
    notifs="$(filtered_notifs)"
    [ -n "$notifs" ] || exit 0
    fzf --ansi <<<"$notifs"
}

mark_notifs_read() {
    gh api -X PUT /notifications -F read=true --silent
}

gh_info() {
    local repo type num
    read -r _ repo type num _
    if [[ $open_browser_view == "true" ]]; then
        case $type in
        "PullRequest" | "Issue")
            gh browse "${num#\#}" -R "${repo}"
            ;;
        *)
            gh browse -R "${repo}"
            ;;
        esac
    else
        case $type in
        "PullRequest")
            gh pr view "${num#\#}" -R "${repo}"
            ;;
        "Issue")
            gh issue view "${num#\#}" -R "${repo}"
            ;;
        "Release")
            gh release view -R "${repo}"
            ;;
        *) ;;
        esac
    fi
}

if [[ $mark_read_flag == "true" ]]; then
    mark_notifs_read
    exit 0
fi

if [[ $print_static_flag == "false" ]]; then
    if ! type -p fzf >/dev/null; then
        echo "error: install \`fzf\` or use the -s flag" >&2
        exit 1
    fi
    select_notif | gh_info
else
    filtered_notifs
fi
